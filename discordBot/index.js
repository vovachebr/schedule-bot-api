const Discord = require('discord.js');
const { connect } = require('./../util/mongoConnector');
const Logger = require('../util/logger');

const client = new Discord.Client();

client.on('ready', async() => {
  console.log('Hello!');
});

client.on('message', async(message) => {
  if(message.author.bot) return;
  if(!message.guild) return;

  const roles = Array.from(message.member.roles.cache).map(e => e[1].name.toLowerCase());

  if(message.content.includes('/create_hook')) {
    if(!roles.includes('coordinator') && !roles.includes('–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä')) {
      message.reply('–û—à–∏–±–∫–∞! –î–∞–Ω–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º');
      return;
    }

    createHook(message);
    return;
  }

  if(message.content.includes('/remove_hook')) {
    if(!roles.includes('coordinator') && !roles.includes('–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä')) {
      message.reply('–û—à–∏–±–∫–∞! –î–∞–Ω–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è');
      return;
    }

    removeHook(message);
    return;
  }

  if(message.content.includes('/addme')) {
    addUserToGroup(message);
    return;
  }
});

function createHook(message) {
  const group = message.content.split(' ')[1];
  if(!group) {
    message.reply('–û—à–∏–±–∫–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è');
    return;
  }

  const channel = message.client.channels.cache.get(message.channel.id);

  connect(async (client) => {
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");

    const foundHooks = await hooksCollection.find({$or: [{channelId: message.channel.id},{group: message.channel.name}]}).toArray();
    if(foundHooks.length > 0){
      client.close();
      channel.send("–û—à–∏–±–∫–∞! –•—É–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è");
      return;
    }

    await hooksCollection.insertOne({group, channelId: message.channel.id, channel: message.channel.name, messegerType: "discord" })
    channel.send("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.");
  });
}

function removeHook(message) {
  connect(async (client) => {
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");
    const channel = client.channels.cache.get(message.channel.id);

    const hooks = await hooksCollection.find({$or: [{channelId: message.channel.id},{group: message.channel.name}]}).toArray();
    if(hooks.length == 0){
      client.close();
      channel.send("–û—à–∏–±–∫–∞! –•—É–∫ —É–∂–µ —É–¥–∞–ª—ë–Ω‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è");
      return;
    }
  
    await hooksCollection.remove({channelId: message.channel.id});
    channel.send("–•—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω");
  });
}

function addUserToGroup(message) {
  const group = message.content.split(' ')[1];
  connect(async (databaseClient) => {
    const db = databaseClient.db("schedule");
    const hooksCollection = db.collection("hooks");

    const foundHook = await hooksCollection.findOne({group});
    const userToLogging = {
      id: message.member.id,
      real_name: message.member.user.username
    }
    if(!foundHook){
      message.reply(`–ö–∞–Ω–∞–ª **${group}** –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –∫—É—Ä—Å–∞ –∑–∞ –ø–æ–º–æ—â—å—é.`);
      Logger.sendUserTextMessage(userToLogging, message.channel.name, `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª *${group}*. ‚òπÔ∏è`);
      return;
    }

    const channel = client.channels.cache.get(foundHook.channelId);
    channel.updateOverwrite(message.member, {
      SEND_MESSAGES: true,
      VIEW_CHANNEL: true
    })
    .then(res => {
      message.reply(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–∞–Ω–∞–ª **${group}**`);
      Logger.sendUserTextMessage(userToLogging, message.channel.name, `–£–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª *${group}*. üéâ`);
    })
    .catch(err => {
      message.reply('–ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–∫–∞');
      Logger.sendUserTextMessage(userToLogging, message.channel.name, `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª *${group}*. ‚òπÔ∏è \n –û–®–ò–ë–ö–ê: ${JSON.stringify(err)} \n`)
    });
  });
}

module.exports = client;
