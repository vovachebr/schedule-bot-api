const TelegramBot = require('node-telegram-bot-api');
const { connect } = require('./../util/mongoConnector');

const {TELEGRAM_BOT_TOKEN} = process.env;

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
  polling: true
});

bot.onText(/\/create_hook/, async (message) => {
  const data = await bot.getChatMember(message.chat.id, message.from.id);
  bot.deleteMessage(message.chat.id, message.message_id);
  if ((data.status !== "creator") && (data.status !== "administrator")){
    bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
    return;
  }

  connect(async (client) => {
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");

    const foundHooks = await hooksCollection.find({$or: [{channelId: message.chat.id},{group: message.chat.title}]}).toArray();
    if(foundHooks.length > 0){
      client.close();
      bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞. –•—É–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
      return;
    }

    const group = message.text.split(" ").slice(1).join();
    await hooksCollection.insertOne({group, channelId: message.chat.id, channel: message.chat.title, messegerType: "telegram" })
    bot.sendMessage(message.chat.id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.");
  });
});

bot.onText(/\/remove_hook/, async (message) => {
  const data = await bot.getChatMember(message.chat.id, message.from.id);
  bot.deleteMessage(message.chat.id, message.message_id);
  if ((data.status !== "creator") && (data.status !== "administrator")){
    bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
    return;
  }

  connect(async (client) => {
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");

    const hooks = await hooksCollection.find({$or: [{channelId: message.chat.id},{group: message.chat.title}]}).toArray();
    if(hooks.length == 0){
      client.close();
      bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞. –•—É–∫ —É–∂–µ —É–¥–∞–ª—ë–Ω.");
      return;
    }
  
    await hooksCollection.remove({channelId: message.chat.id});
    bot.sendMessage(message.chat.id, "–•—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω");
  });
});

bot.onText(/\/when_lesson/, (message) => {
    connect(async (client) => {
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");
    const lessonsCollection = db.collection("lessons");

    bot.deleteMessage(message.chat.id, message.message_id);
    const hook = await hooksCollection.findOne({$or: [{channelId: message.chat.id},{group: message.chat.title}]});
    if(!hook){
      client.close();
      bot.sendMessage(message.chat.id, "–•—É–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }

    const data = await bot.getChatMember(message.chat.id, message.from.id);
    const me = await bot.getMe();
    const myData = await bot.getChatMember(message.chat.id, me.id);
    const canAsk = (data.status !== "creator") && (data.status !== "administrator");

    const now = Date.now();
    if(hook.whenLessonLastUsedDate && now - hook.whenLessonLastUsedDate < 3600*1000 && canAsk){
      if(myData.status !== "administrator"){
        bot.sendMessage(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ, –∏ –Ω–µ —Ç—Ä–µ–≤–æ–∂—å—Ç–µ –º–µ–Ω—è –æ—á–µ–Ω—å —á–∞—Å—Ç–æ.");
        return;
      }
      const banTime = (message.date) + 30000;

      bot.sendMessage(message.chat.id, `
–ü–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –ø—Ä–æ—Å–∏–ª –≤–µ–¥—å üò°. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —á–∞—Å—Ç–æ ü§¨.
${message.from.first_name || ''} ${message.from.last_name || ''}${message.from.username ? `(@${message.from.username})` : ''}
–í—ã–Ω—É–∂–¥–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—Å —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ ${new Date(banTime*1000).toLocaleTimeString()}. –ü—É—Å–∫–∞–π —ç—Ç–æ –ø–æ—Å–ª—É–∂–∏—Ç –≤–∞–º –∏ –¥—Ä—É–≥–∏–º —É—Ä–æ–∫–æ–º.
id: ${message.from.id}`);
      bot.restrictChatMember(message.chat.id, message.from.id, {can_send_messages: false, until_date:banTime});
      return;
    }
    
    const lessons = await lessonsCollection.find({group: hook.group}).toArray();
    lastUseDate = new Date();
    const result = await hooksCollection.findOneAndUpdate({$or: [{channelId: message.chat.id},{group: message.chat.title}]},
      {$set: {whenLessonLastUsedDate: lastUseDate}});

    const notPassedLessons = lessons.filter(l => (new Date() - new Date(l.date))/(1000*60*60) <= 24);//–º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫
    if(notPassedLessons.length === 0){
      bot.sendMessage(message.chat.id, "–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    let nearestLesson = notPassedLessons[notPassedLessons.length - 1];
    for (const lesson of notPassedLessons) {
      const lessonDate = new Date(lesson.date);
      if(lessonDate < new Date(nearestLesson.date))
        nearestLesson = lesson;
    }
    

    bot.sendMessage(message.chat.id, 
    `–î–∞—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è: ${nearestLesson.date.split("-").reverse().join("-")} (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏).
–í—Ä–µ–º—è: ${nearestLesson.time}.
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${nearestLesson.teacher}.
–¢–µ–º–∞: "${nearestLesson.lecture}".

–í–ù–ò–ú–ê–ù–ò–ï! –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ —Ü–µ–ª—è—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ñ–ª—É–¥–∞.
${myData.status == "administrator" ? '–ò–Ω–∞—á–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –º–µ—Ä—ã –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è! (5-—Ç–∏ —á–∞—Å–æ–≤–æ–π –±–∞–Ω üòú)' : ''}`);
  });
});

bot.onText(/\/forgive/, async (message) => {
  const data = await bot.getChatMember(message.chat.id, message.from.id);
  bot.deleteMessage(message.chat.id, message.message_id);
  if ((data.status !== "creator") && (data.status !== "administrator")){
    bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
    return;
  }

  const replyMessage = message.reply_to_message;
  if(!replyMessage){
    bot.sendMessage(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é, –∫–æ–≥–æ –ø–æ–º–∏–ª–æ–≤–∞—Ç—å.");
    return;
  }

  const id = replyMessage.text.split("id: ")[1];
  const user = replyMessage.text.split("\n")[1];
  bot.restrictChatMember(message.chat.id, id, {can_send_messages: true});
  bot.sendMessage(message.chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user} –ø–æ–º–∏–ª–æ–≤–∞–Ω.`);
});

module.exports = bot;
