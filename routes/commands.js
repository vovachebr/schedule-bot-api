const { SLACK_BOT_TOKEN } = process.env;

const router = require('express').Router();
const httpRequest = require('request');
const { connect } = require('./../util/mongoConnector');
const { getUserInfo } = require('./../util/getUserInfo');
const { getGroupName } = require('./../util/getGroupName');
const Logger = require('./../util/logger');

router.post("/addme", (request, response) => {
  const channelName = request.body.text.toLowerCase();
  const userId = request.body.user_id;
   
  connect(async (client) => {
    const body = request.body;
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");

    const hook = await hooksCollection.findOne({channel: channelName});
    if(!hook){
      response.json({
        response_type: "ephemeral",
        text: `–ö–∞–Ω–∞–ª ${channelName} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –∫—É—Ä—Å–∞ –∑–∞ –ø–æ–º–æ—â—å—é.`
      });
      getGroupName(channelId, (groupName) => {
        getUserInfo(body.user_id, (res) => Logger.sendUserTextMessage(res.user, groupName, `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª *${body.text}*. ‚òπÔ∏è`))
      });

      return;
    }

    options = {
      uri: `https://slack.com/api/conversations.invite?token=${SLACK_BOT_TOKEN}&channel=${hook.channelId}&users=${userId}`,
      method: 'POST'
    }

    httpRequest(options, (error, res) => {
      response.json({ blocks: [
        {
          "type": "section",
          text:{
            "type": "mrkdwn",
            text: `–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª ${channelName}. üéâ`
          }
        }
      ]});

      getGroupName(channelId, (groupName) => {
        getUserInfo(body.user_id, (res) => Logger.sendUserTextMessage(res.user, groupName, `–£–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª *${body.text}*. üéâ`))
      });
    });
  });
});

router.post("/moveme", (request, response) => {
  const channelName = request.body.text.toLowerCase();
  const userId = request.body.user_id;
  const channelId = request.body.channel_id;
   
  connect(async (client) => {
    const body = request.body;
    const db = client.db("schedule");
    const hooksCollection = db.collection("hooks");

    const hook = await hooksCollection.findOne({channel: channelName});
    if(!hook){
      client.close();
      response.json({
        response_type: "ephemeral",
        text: `–ö–∞–Ω–∞–ª ${channelName} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –∫—É—Ä—Å–∞ –∑–∞ –ø–æ–º–æ—â—å—é.`
      });
      getGroupName(channelId, (groupName) => {
        getUserInfo(body.user_id, (res) => Logger.sendUserTextMessage(res.user, groupName, `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª *${body.text}*. ‚òπÔ∏è`));
      });
      return;
    }

    options = {
      uri: `https://slack.com/api/conversations.invite?token=${SLACK_BOT_TOKEN}&channel=${hook.channelId}&users=${userId}`,
      method: 'POST'
    }

    httpRequest(options, (error, res) => {
      options.uri = options.uri.replace("invite", "kick");
      options.uri = options.uri.replace("users", "user");
      options.uri = options.uri.replace(hook.channelId, request.body.channel_id);
      httpRequest(options, () => {
        getGroupName(channelId, (groupName) => {
          getUserInfo(body.user_id, (res) => Logger.sendUserTextMessage(res.user, groupName, `–£–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª *${body.text}*. üéâ`));
        });
      });
    });
  })
});

module.exports = router;